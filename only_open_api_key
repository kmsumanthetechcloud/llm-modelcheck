import streamlit as st
import requests
from bs4 import BeautifulSoup
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser
from langchain_openai import ChatOpenAI
import difflib
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()
os.environ["LANGCHAIN_TRACING_V2"] = "true"
os.environ["LANGCHAIN_API_KEY"] = os.getenv("LANGCHAIN_API_KEY")
os.environ["OPENAI_API_KEY"] = os.getenv("OPENAI_API_KEY")

# Optional: fix for org ID issue
if "OPENAI_ORG_ID" in os.environ:
    del os.environ["OPENAI_ORG_ID"]

FIXED_URL = "http://13.233.236.167/"

@st.cache_data(show_spinner=True)
def fetch_website_text(url):
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, "html.parser")
        text = soup.get_text(separator=". ").strip()
        return text
    except Exception as e:
        return f"Error fetching website content: {e}"

def find_relevant_text(text, query):
    sentences = text.split(". ")
    query_words = set(query.lower().split())
    relevant_sentences = []

    for idx, sentence in enumerate(sentences):
        if any(word in sentence.lower() for word in query_words):
            relevant_sentences.append(sentence)
            relevant_sentences.extend(sentences[idx+1:idx+3])
            break

    if not relevant_sentences:
        matches = difflib.get_close_matches(query, sentences, n=1, cutoff=0.4)
        if matches:
            idx = sentences.index(matches[0])
            relevant_sentences.append(matches[0])
            relevant_sentences.extend(sentences[idx+1:idx+3])

    return ". ".join(relevant_sentences) if relevant_sentences else ""

# Streamlit chatbot interface
st.title("ðŸ§  Website Chatbot (Token Optimized with GPT-4o-mini)")

website_content = fetch_website_text(FIXED_URL)

if website_content.startswith("Error"):
    st.error(website_content)
else:
    st.success("Website content loaded!")

# Session state for history
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

user_input = st.chat_input("Ask your question about the website...")

if user_input and not website_content.startswith("Error"):
    context = find_relevant_text(website_content, user_input)

    if not context:
        st.session_state.chat_history.append(("user", user_input))
        st.session_state.chat_history.append(("bot", "Sorry, I couldn't find anything related to that."))
    else:
        prompt = ChatPromptTemplate.from_messages([
            (
                "system",
                "You are a concise chatbot assistant. Use ONLY the provided CONTEXT. "
                "Answer in **1-2 short sentences**, without repeating the question or adding anything extra."
            ),
            ("user", "CONTEXT: {context}\nQUESTION: {question}")
        ])

        output_parser = StrOutputParser()

        try:
            gpt_llm = ChatOpenAI(
                model="gpt-4o-mini",
                openai_api_key=os.getenv("OPENAI_API_KEY"),
                temperature=0.4,
                max_tokens=100
            )
            chain = prompt | gpt_llm | output_parser
            answer = chain.invoke({"context": context, "question": user_input})
        except Exception as e:
            answer = f"Error: {e}"

        st.session_state.chat_history.append(("user", user_input))
        st.session_state.chat_history.append(("bot", answer))

# Show chat history
for role, message in st.session_state.chat_history:
    if role == "user":
        st.chat_message("user").write(message)
    else:
        st.chat_message("assistant").write(message)
